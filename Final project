##AR(1) method training
#For 1 month model
!pip install pandas
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AutoReg

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)
df = df.drop(df.columns[0], axis=1)
df = df.T

# Compute the inflation rate
df.iloc[:, 1] = (np.log(df.iloc[:, 1]) - np.log(df.iloc[:, 1].shift(1))) * 12

# Transform the predictors
for i in range(5, df.shape[1]):
    df.iloc[:, i] = (np.log(df.iloc[:, i]) - np.log(df.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X = df.iloc[:, 5:].T
y = df.iloc[:, 1]

# Remove the first row as it contains NaN
X = X.iloc[:, 1:]
y = y.iloc[1:]

# Implement time series cross-validation
from sklearn.model_selection import TimeSeriesSplit

tscv = TimeSeriesSplit(n_splits=5)

for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train an AR(1) model
    model = AutoReg(y_train.values, lags=1)
    model_fit = model.fit()

    # Make predictions
    y_pred = model_fit.predict(start=len(y_train), end=len(y_train)+len(y_test)-1, dynamic=False)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

# Train the AR(1) model on the entire dataset
model = AutoReg(y.values, lags=1)
model_fit = model.fit()

# Forecast the inflation rate 1 month ahead
forecast = model_fit.predict(start=len(y), end=len(y), dynamic=False)
print(f"Forecast for 1 month ahead: {forecast}")

#For 3 month model
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AutoReg

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)
df = df.drop(df.columns[0], axis=1)
df = df.T

# Compute the inflation rate
df.iloc[:, 1] = (np.log(df.iloc[:, 1]) - np.log(df.iloc[:, 1].shift(1))) * 12

# Transform the predictors
for i in range(5, df.shape[1]):
    df.iloc[:, i] = (np.log(df.iloc[:, i]) - np.log(df.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X = df.iloc[:, 5:].T
y = df.iloc[:, 1]

# Shift y 3 months ahead
y = y.shift(-3)

# Remove the last 3 rows as they contain NaN
X = X.iloc[:, 1:-3]
y = y.iloc[1:-3]

# Implement time series cross-validation
tscv = TimeSeriesSplit(n_splits=5)

for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train an AR(1) model
    model = AutoReg(y_train.values, lags=1)
    model_fit = model.fit()

    # Make predictions
    y_pred = model_fit.predict(start=len(y_train), end=len(y_train)+len(y_test)-1, dynamic=False)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

# Train the AR(1) model on the entire dataset
model = AutoReg(y.values, lags=1)
model_fit = model.fit()

# Forecast the inflation rate 3 months ahead
forecast = model_fit.predict(start=len(y), end=len(y)+2, dynamic=False)
print(f"Forecast for 3 months ahead: {forecast[-1]}")

#For 12 month model
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AutoReg

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)
df = df.drop(df.columns[0], axis=1)
df = df.T

# Compute the inflation rate
df.iloc[:, 1] = (np.log(df.iloc[:, 1]) - np.log(df.iloc[:, 1].shift(1))) * 12

# Transform the predictors
for i in range(5, df.shape[1]):
    df.iloc[:, i] = (np.log(df.iloc[:, i]) - np.log(df.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X = df.iloc[:, 5:].T
y = df.iloc[:, 1]

# Shift y 12 months ahead
y = y.shift(-12)

# Remove the last 12 rows as they contain NaN
X = X.iloc[:, 1:-12]
y = y.iloc[1:-12]

# Implement time series cross-validation
tscv = TimeSeriesSplit(n_splits=5)

for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train an AR(1) model
    model = AutoReg(y_train.values, lags=1)
    model_fit = model.fit()

    # Make predictions
    y_pred = model_fit.predict(start=len(y_train), end=len(y_train)+len(y_test)-1, dynamic=False)

    # Evaluate the model
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

# Train the AR(1) model on the entire dataset
model = AutoReg(y.values, lags=1)
model_fit = model.fit()

# Forecast the inflation rate 12 months ahead
forecast = model_fit.predict(start=len(y), end=len(y)+11, dynamic=False)
print(f"Forecast for 12 months ahead: {forecast[-1]}")

***
##Testing
# Load the testing data
test_url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_testing_fake.xlsx"
test_df = pd.read_excel(test_url, header=None)
test_df = test_df.drop(df.columns[0], axis=1)
test_df = test_df.T

# Compute the inflation rate for the testing data
test_df.iloc[:, 1] = (np.log(test_df.iloc[:, 1]) - np.log(test_df.iloc[:, 1].shift(1))) * 12

# Transform the predictors for the testing data
for i in range(5, test_df.shape[0]):
    test_df.iloc[:, i] = (np.log(test_df.iloc[:, i]) - np.log(test_df.iloc[:, i].shift(1))) * 12

# Prepare the testing data for machine learning
X_test = test_df.iloc[:, 4:].T
y_test = test_df.iloc[:, 1]

# Remove the first row as they contain NaN
X_test = X_test.iloc[1:]
y_test = y_test.iloc[1:]

# Make predictions on the testing data
y_pred = model_fit.predict(start=len(y), end=len(y)+len(y_test)-1, dynamic=False)

# Evaluate the model on the testing data
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error on testing data: {mse}")
***






##LASSO metheod training
#For 1 month model
import pandas as pd
import numpy as np
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
from math import log

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)

# Compute the inflation rate
df.iloc[1] = df.iloc[1].apply(lambda x: log(x))
df.iloc[1] = df.iloc[1].diff() * 12

# Compute the log difference for each predictor
for i in range(5, df.shape[0]):
    df.iloc[i] = df.iloc[i].apply(lambda x: log(x))
    df.iloc[i] = df.iloc[i].diff() * 12

# Split the data into features and target
X = df.iloc[5:].T
y = df.iloc[1]

# Preprocessing: drop the first row of X and y as it contains NaN due to the diff operation
X = X.iloc[1:]
y = y.iloc[1:]

# Define a rolling window for training and validation
window_size = 60  # for example
predictions, actuals = [], []

for t in range(window_size, len(X)):
    X_train, y_train = X.iloc[t-window_size:t], y.iloc[t-window_size:t]
    X_test, y_test = X.iloc[t:t+1], y.iloc[t]
    
    # Train a LASSO model
    model = Lasso(alpha=0.1)  # adjust the alpha parameter as needed
    model.fit(X_train, y_train)
    
    # Make a prediction for the next month
    y_pred = model.predict(X_test)
    
    # Store the prediction and actual value
    predictions.append(y_pred[0])
    actuals.append(y_test)

# Evaluate the model's overall performance
mse = mean_squared_error(actuals, predictions)
print(f"Mean Squared Error: {mse}")

#For 3 month model
import pandas as pd
import numpy as np
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
from math import log

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)

# Compute the inflation rate
df.iloc[1] = df.iloc[1].apply(lambda x: log(x))
df.iloc[1] = df.iloc[1].diff() * 12

# Compute the log difference for each predictor
for i in range(5, df.shape[0]):
    df.iloc[i] = df.iloc[i].apply(lambda x: log(x))
    df.iloc[i] = df.iloc[i].diff() * 12

# Split the data into features and target
X = df.iloc[5:].T
y = df.iloc[1]

# Preprocessing: drop the first row of X and y as it contains NaN due to the diff operation
X = X.iloc[1:]
y = y.iloc[1:]

# Define a rolling window for training and validation
window_size = 60  # for example
predictions, actuals = [], []

for t in range(window_size, len(X)-3):  # adjust the range to leave room for 3-month-ahead prediction
    X_train, y_train = X.iloc[t-window_size:t], y.iloc[t-window_size:t]
    X_test, y_test = X.iloc[t:t+1], y.iloc[t+3]  # adjust the indices for 3-month-ahead prediction
    
    # Train a LASSO model
    model = Lasso(alpha=0.1)  # adjust the alpha parameter as needed
    model.fit(X_train, y_train)
    
    # Make a prediction for 3 months ahead
    y_pred = model.predict(X_test)
    
    # Store the prediction and actual value
    predictions.append(y_pred[0])
    actuals.append(y_test)

# Evaluate the model's overall performance
mse = mean_squared_error(actuals, predictions)
print(f"Mean Squared Error: {mse}")

#For 12 month model
import pandas as pd
import numpy as np
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
from math import log

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)

# Compute the inflation rate
df.iloc[1] = df.iloc[1].apply(lambda x: log(x))
df.iloc[1] = df.iloc[1].diff() * 12

# Compute the log difference for each predictor
for i in range(5, df.shape[0]):
    df.iloc[i] = df.iloc[i].apply(lambda x: log(x))
    df.iloc[i] = df.iloc[i].diff() * 12

# Split the data into features and target
X = df.iloc[5:].T
y = df.iloc[1]

# Preprocessing: drop the first row of X and y as it contains NaN due to the diff operation
X = X.iloc[1:]
y = y.iloc[1:]

# Define a rolling window for training and validation
window_size = 60  # for example
predictions, actuals = [], []

for t in range(window_size, len(X)-12):  # adjust the range to leave room for 12-month-ahead prediction
    X_train, y_train = X.iloc[t-window_size:t], y.iloc[t-window_size:t]
    X_test, y_test = X.iloc[t:t+1], y.iloc[t+12]  # adjust the indices for 12-month-ahead prediction
    
    # Train a LASSO model
    model = Lasso(alpha=0.1)  # adjust the alpha parameter as needed
    model.fit(X_train, y_train)
    
    # Make a prediction for 12 months ahead
    y_pred = model.predict(X_test)
    
    # Store the prediction and actual value
    predictions.append(y_pred[0])
    actuals.append(y_test)

# Evaluate the model's overall performance
mse = mean_squared_error(actuals, predictions)
print(f"Mean Squared Error: {mse}")

##Testing
import pandas as pd
import numpy as np
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error
from math import log

# Load the training data
train_url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
train_df = pd.read_excel(train_url, header=None)

# Load the testing data
test_url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_testing_fake.xlsx"
test_df = pd.read_excel(test_url, header=None)

# Function to preprocess the data
def preprocess_data(df):
    # Compute the inflation rate
    df.iloc[1] = df.iloc[1].apply(lambda x: log(x))
    df.iloc[1] = df.iloc[1].diff() * 12

    # Compute the log difference for each predictor
    for i in range(5, df.shape[0]):
        df.iloc[i] = df.iloc[i].apply(lambda x: log(x))
        df.iloc[i] = df.iloc[i].diff() * 12

    # Split the data into features and target
    X = df.iloc[5:].T
    y = df.iloc[1]

    # Preprocessing: drop the first row of X and y as it contains NaN due to the diff operation
    X = X.iloc[1:]
    y = y.iloc[1:]

    return X, y

# Preprocess the training and testing data
X_train, y_train = preprocess_data(train_df)
X_test, y_test = preprocess_data(test_df)

# Define a rolling window for training and validation
window_size = 60  # for example
predictions, actuals = [], []

for t in range(window_size, len(X_train)-12):  # adjust the range to leave room for 12-month-ahead prediction
    X_train_window, y_train_window = X_train.iloc[t-window_size:t], y_train.iloc[t-window_size:t]
    X_test_window, y_test_window = X_train.iloc[t:t+1], y_train.iloc[t+12]  # adjust the indices for 12-month-ahead prediction
    
    # Train a LASSO model
    model = Lasso(alpha=0.1)  # adjust the alpha parameter as needed
    model.fit(X_train_window, y_train_window)
    
    # Make a prediction for 12 months ahead
    y_pred = model.predict(X_test_window)
    
    # Store the prediction and actual value
    predictions.append(y_pred[0])
    actuals.append(y_test_window)

# Evaluate the model's overall performance on the training data
mse = mean_squared_error(actuals, predictions)
print(f"Mean Squared Error on training data: {mse}")

# Use the trained model to make predictions on the testing data
y_pred_test = model.predict(X_test)
print(f"Predictions on testing data: {y_pred_test}")





##Random forest method
#For 1 month model
import pandas as pd
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)
df = df.drop(df.columns[0], axis=1)
df = df.T

# Compute the inflation rate
df.iloc[:, 1] = (np.log(df.iloc[:, 1]) - np.log(df.iloc[:, 1].shift(1))) * 12

# Transform the predictors into log difference
for i in range(5, df.shape[1]):
    df.iloc[:, i] = (np.log(df.iloc[:, i]) - np.log(df.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X = df.iloc[:, 5:].T
y = df.iloc[:, 1]

# Remove the first row as it contains NaN due to the shift operation
X = X.iloc[:, 1:]
y = y.iloc[1:]

# Split the data into training and testing sets in a time series manner
from sklearn.ensemble import RandomForestRegressor
tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a Random Forest model
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

# Use the model to forecast future inflation rates
# For example, to predict the inflation rate for the next month given its predictors
next_month_predictors = X.iloc[-1].values.reshape(1, -1)
next_month_inflation_rate = model.predict(next_month_predictors)
print(f"Predicted inflation rate for next month: {next_month_inflation_rate[0]}")

#For 3 month model
# Shift the target variable three months back
y = y.shift(-3)

# Remove the last three rows as they contain NaN due to the shift operation
X = X.iloc[ : ,:-3]
y = y.iloc[:-3]

# Split the data into training and testing sets in a time series manner
tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a Random Forest model
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

# Use the model to forecast future inflation rates
# For example, to predict the inflation rate for the next three months given its predictors
next_quarter_predictors = X.iloc[-1].values.reshape(1, -1)
next_quarter_inflation_rate = model.predict(next_quarter_predictors)
print(f"Predicted inflation rate for next quarter: {next_quarter_inflation_rate[0]}")

#For 12 month model
# Shift the target variable twelve months back
y = y.shift(-12)

# Remove the last twelve rows as they contain NaN due to the shift operation
X = X.iloc[ : ,:-12]
y = y.iloc[:-12]

# Split the data into training and testing sets in a time series manner
tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a Random Forest model
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"Mean Squared Error: {mse}")

# Use the model to forecast future inflation rates
# For example, to predict the inflation rate for the next twelve months given its predictors
next_year_predictors = X.iloc[-1].values.reshape(1, -1)
next_year_inflation_rate = model.predict(next_year_predictors)
print(f"Predicted inflation rate for next year: {next_year_inflation_rate[0]}")

‘’‘
##Testing
# Load the testing data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_testing_fake.xlsx"
df_test = pd.read_excel(url, header=None)
df_test = df_test.drop(df_test.columns[0], axis=1)
df_test = df_test.T

# Compute the inflation rate
df_test.iloc[:, 1] = (np.log(df_test.iloc[:, 1]) - np.log(df_test.iloc[:, 1].shift(1))) * 12

# Transform the predictors into log difference
for i in range(4, test_df.shape[1]):
    df_test.iloc[:, i] = (np.log(df_test.iloc[:, i]) - np.log(df_test.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X_test = df_test.iloc[4:].T
y_test = df_test.iloc[1]

# Remove the first row as it contains NaN due to the shift operation
X_test = X_test.iloc[1:]
y_test = y_test.iloc[1:]

# Use the model to make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error on testing data: {mse}")
’‘’




##Gradient boosting method
#For 1 month model
import pandas as pd
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
import math

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)
df = df.drop(df.columns[0], axis=1)
df = df.T

# Compute the inflation rate
df.iloc[:, 1] = (np.log(df.iloc[:, 1]) - np.log(df.iloc[:, 1].shift(1))) * 12


# Transform the predictors into log difference
for i in range(5, df.shape[1]):
    df.iloc[:, i] = (np.log(df.iloc[:, i]) - np.log(df.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X = df.iloc[:, 5:].T
y = df.iloc[:, 1]

# Remove the first row as it contains NaN due to the shift operation
X = X.iloc[:, 1:]
y = y.iloc[1:]

# Split the data into training and validation sets
from sklearn.ensemble import GradientBoostingRegressor
tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a Gradient Boosting model
    model = GradientBoostingRegressor()
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = math.sqrt(mse)
    print(f"Root Mean Squared Error: {rmse}")

# Now the model can be used to forecast future inflation rates
# Use the model to forecast future inflation rates
# For example, to predict the inflation rate for the next month given its predictors
next_month_predictors = X.iloc[-1].values.reshape(1, -1)
next_month_inflation_rate = model.predict(next_month_predictors)
print(f"Predicted inflation rate for next month: {next_month_inflation_rate[0]}")


#For 3 months model
import pandas as pd
import numpy as np
from sklearn.model_selection import TimeSeriesSplit
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.metrics import mean_squared_error
import math

# Load the data
url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_training.xlsx"
df = pd.read_excel(url, header=None)
df = df.drop(df.columns[0], axis=1)
df = df.T

# Compute the inflation rate
df.iloc[:, 1] = (np.log(df.iloc[:, 1]) - np.log(df.iloc[:, 1].shift(1))) * 12

# Transform the predictors into log difference
for i in range(5, df.shape[1]):
    df.iloc[:, i] = (np.log(df.iloc[:, i]) - np.log(df.iloc[:, i].shift(1))) * 12

# Prepare the data for machine learning
X = df.iloc[:, 5:].T
y = df.iloc[:, 1]

# Shift y 3 months ahead for 3-month-ahead forecast
y = y.shift(-3)

# Remove the first row as it contains NaN due to the shift operation
X = X.iloc[:, 1:-3]
y = y.iloc[1:-3]

# Split the data into training and validation sets
tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a Gradient Boosting model
    model = GradientBoostingRegressor()
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = math.sqrt(mse)
    print(f"Root Mean Squared Error: {rmse}")

# Now the model can be used to forecast future inflation rates 3 months ahead
# Use the model to forecast future inflation rates
# For example, to predict the inflation rate for the next three months given its predictors
next_quarter_predictors = X.iloc[-1].values.reshape(1, -1)
next_quarter_inflation_rate = model.predict(next_quarter_predictors)
print(f"Predicted inflation rate for next quarter: {next_quarter_inflation_rate[0]}")

#For 12 months model
# Shift y 12 months ahead for 12-month-ahead forecast
y = y.shift(-12)

# Remove the first row as it contains NaN due to the shift operation
X = X.iloc[:, 1:-12]
y = y.iloc[1:-12]

# Split the data into training and validation sets
tscv = TimeSeriesSplit(n_splits=5)
for train_index, test_index in tscv.split(X):
    X_train, X_test = X.iloc[train_index], X.iloc[test_index]
    y_train, y_test = y.iloc[train_index], y.iloc[test_index]

    # Train a Gradient Boosting model
    model = GradientBoostingRegressor()
    model.fit(X_train, y_train)

    # Evaluate the model
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    rmse = math.sqrt(mse)
    print(f"Root Mean Squared Error: {rmse}")

# Now the model can be used to forecast future inflation rates 12 months ahead
# Use the model to forecast future inflation rates
# For example, to predict the inflation rate for the next twelve months given its predictors
next_year_predictors = X.iloc[-1].values.reshape(1, -1)
next_year_inflation_rate = model.predict(next_year_predictors)
print(f"Predicted inflation rate for next year: {next_year_inflation_rate[0]}")


'''
##Testing
# Load the testing data
test_url = "https://github.com/zhentaoshi/Econ5821/raw/main/data_example/US_PCE_testing_fake.xlsx"
test_df = pd.read_excel(test_url, header=None)
test_df = test_df.drop(test_df.columns[0], axis=1)
test_df = test_df.T

# Compute the inflation rate for the testing data
test_df.iloc[:, 1] = (np.log(test_df.iloc[:, 1]) - np.log(test_df.iloc[:, 1].shift(1))) * 12

# Transform the predictors into log difference for the testing data
for i in range(4, test_df.shape[1]):
    test_df.iloc[:, i] = (np.log(test_df.iloc[:, i]) - np.log(test_df.iloc[:, i].shift(1))) * 12

# Prepare the testing data for machine learning
test_X = test_df.iloc[:, 4:]
test_y = test_df.iloc[:, 1]

# Remove the first row as it contains NaN due to the shift operation
test_X = test_X.iloc[1:]
test_y = test_y.iloc[1:]

# Use the trained model to make predictions
y_pred = model.predict(X_test)

# Print the predictions
print(y_pred)
'''
